{"version":3,"sources":["hoc/Layout/Layout.js","components/Button/Button.js","components/TableRow/TableRow.js","store/actions.js","containers/BlogBuilder/BlogBuilder.js","store/actionTypes.js","containers/Post/Post.js","components/ArticleBody/ArticleBody.js","containers/SingleArticle/SingleArticle.js","App.js","store/reducer.js","index.js"],"names":["Layout","react_default","a","createElement","className","this","props","children","Component","button","Button","variant","size","onClick","disabled","loading","type","name","tr","data","date","react_router_dom","to","_id","title","author","createPost","postData","toPath","fetch","method","headers","Content-Type","body","JSON","stringify","value","then","res","status","Error","json","editPost","id","goBack","deletePost","BlogBuilder","createPostHandler","_this","history","push","artilcleHandler","e","dispatch","getPosts","resData","posts","_this2","components_Button_Button","map","element","TableRow_TableRow","key","connect","state","Post","articleForm","valid","handler","formIsValid","isEditing","inputChangeHandler","input","setState","prevState","isValid","length","updatedForm","Object","objectSpread","defineProperty","inputName","postHandler","preventDefault","Actions","saveHandler","postId","article","postCancelledHandler","_this3","onSubmit","placeholder","onChange","target","files","required","singleData","articleBody","postTime","modified","modifyTime","SingleArticle","articleBackHandler","articleEditHandler","articleDeleteHandler","match","params","articleId","getPost","post","ArticleBody_ArticleBody","App","hoc_Layout_Layout","react_router","path","render","containers_Post_Post","assign","component","Article","exact","initialState","reducer","arguments","undefined","action","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.07db994b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Layout.css'\n\nclass Layout extends Component {\n  render () {\n    return (\n      <div className='container'>\n        <div className='header'>\n          <h3 className='text-muted'>My Blog</h3>\n        </div>\n\n        <main>\n          {this.props.children}\n        </main>\n\n        <div className='footer'>\n          <p className='text-center'>Developed by Kane Wei.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport './Button.css'\n\nconst button = props =>\n\n  <Button className='button' variant={props.variant} size={props.size}\n    onClick={props.onClick}\n    disabled={props.disabled || props.loading}\n    type={props.type}>\n    {props.name}\n  </Button>\n\nexport default button\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './TableRow.css'\n\nconst tr = props =>\n  <tr>\n    <td>{props.data.date}</td>\n    <td><Link to={'/article/' + props.data._id}>{props.data.title}</Link></td>\n    <td>{props.data.author}</td>\n  </tr>\n\nexport default tr\n","\nexport const createPost = (postData, toPath) => {\n  fetch('http://localhost:8080/blog/post', { method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: postData.title.value,\n      author: postData.author.value,\n      body: postData.body.value\n    })\n  })\n    .then(res => {\n      if (res.status !== 201) {\n        throw new Error('Failed to create post.')\n      }\n      return res.json()\n    })\n    .then(() => {\n      toPath('/')\n    })\n}\n\nexport const getPosts = (dispatch) => {\n  fetch('http://localhost:8080/blog/posts', { method: 'GET'\n  })\n    .then(res => {\n      if (res.status !== 200) {\n        throw new Error('Failed to get posts.')\n      }\n      return res.json()\n    })\n    .then(resData => {\n      dispatch(resData.posts)\n    })\n}\n\nexport const getPost = (dispatch, id) => {\n  fetch('http://localhost:8080/blog/post/' + id, { method: 'GET'\n  })\n    .then(res => {\n      if (res.status !== 200) {\n        throw new Error('Failed to get post.')\n      }\n      return res.json()\n    })\n    .then(resData => {\n      dispatch(resData.post)\n    })\n}\n\nexport const editPost = (postData, id, toPath) => {\n  fetch('http://localhost:8080/blog/post/' + id, { method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: postData.title.value,\n      author: postData.author.value,\n      body: postData.body.value\n    })\n\n  })\n    .then(res => {\n      if (res.status !== 200) {\n        throw new Error('Failed to edit post.')\n      }\n      return res.json()\n    })\n    .then(() => {\n      toPath.goBack()\n    })\n}\n\nexport const deletePost = (id, toPath) => {\n  fetch('http://localhost:8080/blog/post/' + id, { method: 'DELETE'\n  })\n    .then(res => {\n      if (res.status !== 200) {\n        throw new Error('Failed to delete post.')\n      }\n      return res.json()\n    })\n    .then(() => {\n      toPath.goBack()\n    })\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport './BlogBuilder.css'\nimport Button from '../../components/Button/Button'\nimport TableRwo from '../../components/TableRow/TableRow'\nimport * as actionTypes from '../../store/actionTypes'\nimport * as Actions from '../../store/actions'\n\nclass BlogBuilder extends Component {\n    createPostHandler = () => {\n      this.props.history.push('/post')\n    };\n\n    artilcleHandler = (e) => {\n      this.props.history.push('/article/' + e)\n    }\n\n    componentWillMount () {\n      // fetch getPosts\n      Actions.getPosts(this.props.getPosts)\n    }\n\n    render () {\n      return (\n        <div>\n          <p><Button onClick={this.createPostHandler} variant='primary' size='sm' name='Post' /></p>\n          <table className=''>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Title</th>\n                <th>Author</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.posts.map(element => (\n                <TableRwo data={element} key={element._id} onClick={this.artilcleHandler} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )\n    };\n};\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPosts: (posts) => dispatch({ type: actionTypes.GET_POSTS, posts: posts })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlogBuilder)\n","export const GET_POSTS = 'GET_POSTS'\nexport const GET_SINGLE_POST = 'GET_SINGLE_POST'\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Button from '../../components/Button/Button'\nimport './Post.css'\nimport * as Actions from '../../store/actions'\n\nclass Post extends Component {\n    state = {\n      articleForm: {\n        title: {\n          value: '',\n          valid: false\n        },\n        author: {\n          value: '',\n          valid: false\n        },\n        body: {\n          value: '',\n          valid: false\n        }\n      },\n      button: {\n        name: '',\n        handler: null\n      },\n      formIsValid: false,\n      isEditing: false\n    };\n\n    componentDidMount () {\n      if (this.props.isEditing) {\n        this.setState(prevState => {\n          const updatedForm = { ...prevState.articleForm,\n            title: {\n              value: this.props.article.title,\n              valid: true\n            },\n            author: {\n              value: this.props.article.author,\n              valid: true\n            },\n            body: {\n              value: this.props.article.body,\n              valid: true\n            }\n          }\n\n          let formIsValid = true\n          for (const inputName in updatedForm) {\n            formIsValid = formIsValid && updatedForm[inputName].valid\n          }\n\n          let button = { ...prevState.button,\n            name: 'Save',\n            handler: this.saveHandler\n          }\n\n          return {\n            articleForm: updatedForm,\n            formIsValid: formIsValid,\n            button: button\n          }\n        })\n      } else {\n        this.setState(prevState => {\n          let button = { ...prevState.button,\n            name: 'Post',\n            handler: this.postHandler\n          }\n\n          return {\n            button: button\n          }\n        })\n      }\n    }\n\n    inputChangeHandler = (input, value) => {\n      this.setState(prevState => {\n        let isValid = value.length > 0\n\n        const updatedForm = {\n          ...prevState.articleForm,\n          [input]: {\n            ...prevState.articleForm[input],\n            valid: isValid,\n            value: value\n          }\n        }\n\n        let formIsValid = true\n        for (const inputName in updatedForm) {\n          formIsValid = formIsValid && updatedForm[inputName].valid\n        }\n\n        return {\n          articleForm: updatedForm,\n          formIsValid: formIsValid\n        }\n      })\n    };\n\n    postHandler = e => {\n      e.preventDefault()\n      // fetch API\n      Actions.createPost(this.state.articleForm, this.props.history.push)\n    }\n\n    saveHandler = e => {\n      e.preventDefault()\n      // fetch API\n      const postId = this.props.article._id\n      Actions.editPost(this.state.articleForm, postId, this.props.history)\n    }\n\n    postCancelledHandler = () => {\n      this.props.history.goBack()\n    }\n\n    render () {\n      return (\n        <div>\n          <form onSubmit={e =>\n            this.state.button.handler(e, {\n              title: this.state.articleForm.title.value,\n              author: this.state.articleForm.author.value,\n              body: this.state.articleForm.body.value\n            })\n          }>\n            <div className='from-group'>\n              <label>Title</label>\n              <input id='title' className='input' placeholder='Title' value={this.state.articleForm.title.value} onChange={e => this.inputChangeHandler(e.target.id, e.target.value, e.target.files)} required />\n            </div>\n            <div className='from-group'>\n              <label>Author</label>\n              <input id='author' className='input' placeholder='Author' value={this.state.articleForm.author.value} onChange={e => this.inputChangeHandler(e.target.id, e.target.value, e.target.files)} required />\n            </div>\n            <div className='from-group'>\n              <label>Body</label>\n              <textarea id='body' className='input' placeholder='Write something' value={this.state.articleForm.body.value} onChange={e => this.inputChangeHandler(e.target.id, e.target.value, e.target.files)} />\n            </div>\n\n            <div className='from-group text-center'>\n              <Button type='Submit' variant='primary' size='sm' disabled={!this.state.formIsValid} name={this.state.button.name} />\n              <Button variant='outline-secondary' size='sm' name='Cancel' onClick={this.postCancelledHandler} />\n            </div>\n          </form>\n        </div>\n      )\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n    article: state.singleData\n  }\n}\n\nexport default connect(mapStateToProps)(Post)\n","import React from 'react'\nimport './ArticleBody.css'\n\nconst articleBody = props =>\n  <article>\n    <h4 className='text-center'>{props.data.title}</h4>\n    <p className='text article-body'>{props.data.body}</p>\n    <p className='time text'>Posted by {props.data.author} at {props.data.postTime}</p>\n    {(props.data.modified\n      ? <p className='time text'>Modified at {props.data.modifyTime}</p>\n      : ''\n    )}\n\n  </article>\n\nexport default articleBody\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Article from '../../components/ArticleBody/ArticleBody'\nimport Button from '../../components/Button/Button'\nimport './SingleArticle.css'\nimport * as actionTypes from '../../store/actionTypes'\nimport * as Actions from '../../store/actions'\n\nclass SingleArticle extends Component {\n  componentWillMount () {\n    // fetch getPosts\n    const postId = this.props.match.params.articleId\n    Actions.getPost(this.props.getPost, postId)\n  }\n\n    articleBackHandler = () => {\n      this.props.history.goBack()\n    }\n\n    articleEditHandler = () => {\n      this.props.history.push('/article/' + this.props.article.id + '/edit')\n    }\n\n    articleDeleteHandler = () => {\n      // fecth API\n      const postId = this.props.article._id\n      Actions.deletePost(postId, this.props.history)\n    }\n\n    render () {\n      return (\n        <div>\n          <Article data={this.props.article} />\n          <div className='row'>\n            <div className='col-md-6'>\n              <Button variant='outline-secondary' size='sm' name='Back' onClick={this.articleBackHandler} />\n            </div>\n            <div className='text-right col-md-12'>\n              <Button variant='info' size='sm' name='Edit' onClick={this.articleEditHandler} />\n              <Button variant='danger' size='sm' name='Delete' onClick={this.articleDeleteHandler} />\n            </div>\n          </div>\n        </div>\n      )\n    };\n};\n\nconst mapStateToProps = state => {\n  return {\n    article: state.singleData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPost: (post) => dispatch({ type: actionTypes.GET_SINGLE_POST, post: post })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleArticle)\n","import React, { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Layout from './hoc/Layout/Layout'\nimport BlogBuilder from './containers/BlogBuilder/BlogBuilder'\nimport Post from './containers/Post/Post'\nimport Article from './containers/SingleArticle/SingleArticle'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Layout>\n          <Switch>\n            <Route path='/post' render={(props) => <Post {...props} isEditing={false} />} />\n            <Route path='/article/:articleId/edit' render={(props) => <Post {...props} isEditing />} />\n            <Route path='/article/:articleId' component={Article} />\n            <Route path='/' exact component={BlogBuilder} />\n          </Switch>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import * as actionTypes from './actionTypes'\n\nconst initialState = {\n  posts: [],\n  singleData: {}\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      }\n\n    case actionTypes.GET_SINGLE_POST:\n      return {\n        ...state,\n        singleData: action.post\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n  ,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}